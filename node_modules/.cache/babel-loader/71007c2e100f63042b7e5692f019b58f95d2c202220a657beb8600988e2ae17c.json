{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport useMediaQuery from \"./query\";\nexport var MediaQueryEnum = {\n  xs: {\n    maxWidth: 575,\n    matchMedia: '(max-width: 575px)'\n  },\n  sm: {\n    minWidth: 576,\n    maxWidth: 767,\n    matchMedia: '(min-width: 576px) and (max-width: 767px)'\n  },\n  md: {\n    minWidth: 768,\n    maxWidth: 991,\n    matchMedia: '(min-width: 768px) and (max-width: 991px)'\n  },\n  lg: {\n    minWidth: 992,\n    maxWidth: 1199,\n    matchMedia: '(min-width: 992px) and (max-width: 1199px)'\n  },\n  xl: {\n    minWidth: 1200,\n    maxWidth: 1599,\n    matchMedia: '(min-width: 1200px) and (max-width: 1599px)'\n  },\n  xxl: {\n    minWidth: 1600,\n    matchMedia: '(min-width: 1600px)'\n  }\n};\n/**\n * loop query screen className\n * Array.find will throw a error\n * `Rendered more hooks than during the previous render.`\n * So should use Array.forEach\n */\nexport var getScreenClassName = function getScreenClassName() {\n  var queryKey = undefined;\n  // support ssr\n  if (typeof window === 'undefined') {\n    return queryKey;\n  }\n  var mediaQueryKey = Object.keys(MediaQueryEnum).find(function (key) {\n    var matchMedia = MediaQueryEnum[key].matchMedia;\n    if (window.matchMedia(matchMedia).matches) {\n      return true;\n    }\n    return false;\n  });\n  queryKey = mediaQueryKey;\n  return queryKey;\n};\nvar useBreakpoint = function useBreakpoint() {\n  var isMd = useMediaQuery(MediaQueryEnum.md.matchMedia);\n  var isLg = useMediaQuery(MediaQueryEnum.lg.matchMedia);\n  var isXxl = useMediaQuery(MediaQueryEnum.xxl.matchMedia);\n  var isXl = useMediaQuery(MediaQueryEnum.xl.matchMedia);\n  var isSm = useMediaQuery(MediaQueryEnum.sm.matchMedia);\n  var isXs = useMediaQuery(MediaQueryEnum.xs.matchMedia);\n  var _useState = useState(getScreenClassName()),\n    _useState2 = _slicedToArray(_useState, 2),\n    colSpan = _useState2[0],\n    setColSpan = _useState2[1];\n  useEffect(function () {\n    if (process.env.NODE_ENV === 'TEST') {\n      setColSpan(process.env.USE_MEDIA || 'md');\n      return;\n    }\n    if (isXxl) {\n      setColSpan('xxl');\n      return;\n    }\n    if (isXl) {\n      setColSpan('xl');\n      return;\n    }\n    if (isLg) {\n      setColSpan('lg');\n      return;\n    }\n    if (isMd) {\n      setColSpan('md');\n      return;\n    }\n    if (isSm) {\n      setColSpan('sm');\n      return;\n    }\n    if (isXs) {\n      setColSpan('xs');\n      return;\n    }\n    setColSpan('md');\n  }, [isMd, isLg, isXxl, isXl, isSm, isXs]);\n  return colSpan;\n};\nexport { useBreakpoint };","map":{"version":3,"names":["_slicedToArray","useEffect","useState","useMediaQuery","MediaQueryEnum","xs","maxWidth","matchMedia","sm","minWidth","md","lg","xl","xxl","getScreenClassName","queryKey","undefined","window","mediaQueryKey","Object","keys","find","key","matches","useBreakpoint","isMd","isLg","isXxl","isXl","isSm","isXs","_useState","_useState2","colSpan","setColSpan","process","env","NODE_ENV","USE_MEDIA"],"sources":["/Users/phanluc/admin-web-fe/node_modules/@ant-design/pro-utils/es/useMediaQuery/index.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport useMediaQuery from \"./query\";\nexport var MediaQueryEnum = {\n  xs: {\n    maxWidth: 575,\n    matchMedia: '(max-width: 575px)'\n  },\n  sm: {\n    minWidth: 576,\n    maxWidth: 767,\n    matchMedia: '(min-width: 576px) and (max-width: 767px)'\n  },\n  md: {\n    minWidth: 768,\n    maxWidth: 991,\n    matchMedia: '(min-width: 768px) and (max-width: 991px)'\n  },\n  lg: {\n    minWidth: 992,\n    maxWidth: 1199,\n    matchMedia: '(min-width: 992px) and (max-width: 1199px)'\n  },\n  xl: {\n    minWidth: 1200,\n    maxWidth: 1599,\n    matchMedia: '(min-width: 1200px) and (max-width: 1599px)'\n  },\n  xxl: {\n    minWidth: 1600,\n    matchMedia: '(min-width: 1600px)'\n  }\n};\n/**\n * loop query screen className\n * Array.find will throw a error\n * `Rendered more hooks than during the previous render.`\n * So should use Array.forEach\n */\nexport var getScreenClassName = function getScreenClassName() {\n  var queryKey = undefined;\n  // support ssr\n  if (typeof window === 'undefined') {\n    return queryKey;\n  }\n  var mediaQueryKey = Object.keys(MediaQueryEnum).find(function (key) {\n    var matchMedia = MediaQueryEnum[key].matchMedia;\n    if (window.matchMedia(matchMedia).matches) {\n      return true;\n    }\n    return false;\n  });\n  queryKey = mediaQueryKey;\n  return queryKey;\n};\nvar useBreakpoint = function useBreakpoint() {\n  var isMd = useMediaQuery(MediaQueryEnum.md.matchMedia);\n  var isLg = useMediaQuery(MediaQueryEnum.lg.matchMedia);\n  var isXxl = useMediaQuery(MediaQueryEnum.xxl.matchMedia);\n  var isXl = useMediaQuery(MediaQueryEnum.xl.matchMedia);\n  var isSm = useMediaQuery(MediaQueryEnum.sm.matchMedia);\n  var isXs = useMediaQuery(MediaQueryEnum.xs.matchMedia);\n  var _useState = useState(getScreenClassName()),\n    _useState2 = _slicedToArray(_useState, 2),\n    colSpan = _useState2[0],\n    setColSpan = _useState2[1];\n  useEffect(function () {\n    if (process.env.NODE_ENV === 'TEST') {\n      setColSpan(process.env.USE_MEDIA || 'md');\n      return;\n    }\n    if (isXxl) {\n      setColSpan('xxl');\n      return;\n    }\n    if (isXl) {\n      setColSpan('xl');\n      return;\n    }\n    if (isLg) {\n      setColSpan('lg');\n      return;\n    }\n    if (isMd) {\n      setColSpan('md');\n      return;\n    }\n    if (isSm) {\n      setColSpan('sm');\n      return;\n    }\n    if (isXs) {\n      setColSpan('xs');\n      return;\n    }\n    setColSpan('md');\n  }, [isMd, isLg, isXxl, isXl, isSm, isXs]);\n  return colSpan;\n};\nexport { useBreakpoint };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}