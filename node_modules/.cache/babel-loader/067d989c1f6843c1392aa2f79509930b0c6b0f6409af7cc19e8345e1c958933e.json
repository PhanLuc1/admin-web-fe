{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { Spin } from 'antd';\nimport { useContext, useEffect, useState } from 'react';\nimport { ProHelpProvide } from \"./HelpProvide\";\nimport { RenderContentPanel } from \"./RenderContentPanel\";\n\n/**\n * 异步加载内容的面板组件\n * @param item 指向当前面板的 ProHelpDataSource\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AsyncContentPanel = function AsyncContentPanel(_ref) {\n  var item = _ref.item,\n    _onInit = _ref.onInit;\n  var _useContext = useContext(ProHelpProvide),\n    onLoadContext = _useContext.onLoadContext; // 获取上下文中的 onLoadContext\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1]; // 加载状态\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    content = _useState4[0],\n    setContent = _useState4[1]; // 内容数据\n\n  useEffect(function () {\n    if (!item.key) return; // 如果没有key则返回\n    setLoading(true); // 开始加载\n    onLoadContext === null || onLoadContext === void 0 || onLoadContext(item.key, item).then(function (res) {\n      // 调用加载方法\n      setLoading(false); // 加载完成\n      setContent(res); // 设置内容数据\n    });\n  }, [item.key]);\n\n  // 如果没有key，则返回null\n  if (!item.key) return null;\n\n  // 如果正在加载并且有key，则显示加载中的状态\n  if (loading && item.key) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '100%',\n        boxSizing: 'border-box',\n        padding: 24\n      },\n      children: /*#__PURE__*/_jsx(Spin, {})\n    }, item.key);\n  }\n\n  // 加载完成后，渲染内容面板\n  return /*#__PURE__*/_jsx(RenderContentPanel, {\n    onInit: function onInit(ref) {\n      _onInit === null || _onInit === void 0 || _onInit(ref);\n    },\n    dataSourceChildren: content\n  });\n};","map":{"version":3,"names":["_slicedToArray","Spin","useContext","useEffect","useState","ProHelpProvide","RenderContentPanel","jsx","_jsx","AsyncContentPanel","_ref","item","_onInit","onInit","_useContext","onLoadContext","_useState","_useState2","loading","setLoading","_useState3","_useState4","content","setContent","key","then","res","style","display","justifyContent","width","boxSizing","padding","children","ref","dataSourceChildren"],"sources":["/Users/phanluc/admin-web-fe/node_modules/@ant-design/pro-layout/es/components/Help/AsyncContentPanel.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { Spin } from 'antd';\nimport { useContext, useEffect, useState } from 'react';\nimport { ProHelpProvide } from \"./HelpProvide\";\nimport { RenderContentPanel } from \"./RenderContentPanel\";\n\n/**\n * 异步加载内容的面板组件\n * @param item 指向当前面板的 ProHelpDataSource\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AsyncContentPanel = function AsyncContentPanel(_ref) {\n  var item = _ref.item,\n    _onInit = _ref.onInit;\n  var _useContext = useContext(ProHelpProvide),\n    onLoadContext = _useContext.onLoadContext; // 获取上下文中的 onLoadContext\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1]; // 加载状态\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    content = _useState4[0],\n    setContent = _useState4[1]; // 内容数据\n\n  useEffect(function () {\n    if (!item.key) return; // 如果没有key则返回\n    setLoading(true); // 开始加载\n    onLoadContext === null || onLoadContext === void 0 || onLoadContext(item.key, item).then(function (res) {\n      // 调用加载方法\n      setLoading(false); // 加载完成\n      setContent(res); // 设置内容数据\n    });\n  }, [item.key]);\n\n  // 如果没有key，则返回null\n  if (!item.key) return null;\n\n  // 如果正在加载并且有key，则显示加载中的状态\n  if (loading && item.key) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '100%',\n        boxSizing: 'border-box',\n        padding: 24\n      },\n      children: /*#__PURE__*/_jsx(Spin, {})\n    }, item.key);\n  }\n\n  // 加载完成后，渲染内容面板\n  return /*#__PURE__*/_jsx(RenderContentPanel, {\n    onInit: function onInit(ref) {\n      _onInit === null || _onInit === void 0 || _onInit(ref);\n    },\n    dataSourceChildren: content\n  });\n};"],"mappings":"AAAA,OAAOA,cAAc,MAAM,0CAA0C;AACrE,SAASC,IAAI,QAAQ,MAAM;AAC3B,SAASC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,kBAAkB,QAAQ,sBAAsB;;AAEzD;AACA;AACA;AACA;AACA,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,OAAO,IAAIC,iBAAiB,GAAG,SAASA,iBAAiBA,CAACC,IAAI,EAAE;EAC9D,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAI;IAClBC,OAAO,GAAGF,IAAI,CAACG,MAAM;EACvB,IAAIC,WAAW,GAAGZ,UAAU,CAACG,cAAc,CAAC;IAC1CU,aAAa,GAAGD,WAAW,CAACC,aAAa,CAAC,CAAC;EAC7C,IAAIC,SAAS,GAAGZ,QAAQ,CAAC,KAAK,CAAC;IAC7Ba,UAAU,GAAGjB,cAAc,CAACgB,SAAS,EAAE,CAAC,CAAC;IACzCE,OAAO,GAAGD,UAAU,CAAC,CAAC,CAAC;IACvBE,UAAU,GAAGF,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,IAAIG,UAAU,GAAGhB,QAAQ,CAAC,CAAC;IACzBiB,UAAU,GAAGrB,cAAc,CAACoB,UAAU,EAAE,CAAC,CAAC;IAC1CE,OAAO,GAAGD,UAAU,CAAC,CAAC,CAAC;IACvBE,UAAU,GAAGF,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE9BlB,SAAS,CAAC,YAAY;IACpB,IAAI,CAACQ,IAAI,CAACa,GAAG,EAAE,OAAO,CAAC;IACvBL,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAClBJ,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,IAAIA,aAAa,CAACJ,IAAI,CAACa,GAAG,EAAEb,IAAI,CAAC,CAACc,IAAI,CAAC,UAAUC,GAAG,EAAE;MACtG;MACAP,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACnBI,UAAU,CAACG,GAAG,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACf,IAAI,CAACa,GAAG,CAAC,CAAC;;EAEd;EACA,IAAI,CAACb,IAAI,CAACa,GAAG,EAAE,OAAO,IAAI;;EAE1B;EACA,IAAIN,OAAO,IAAIP,IAAI,CAACa,GAAG,EAAE;IACvB,OAAO,aAAahB,IAAI,CAAC,KAAK,EAAE;MAC9BmB,KAAK,EAAE;QACLC,OAAO,EAAE,MAAM;QACfC,cAAc,EAAE,QAAQ;QACxBC,KAAK,EAAE,MAAM;QACbC,SAAS,EAAE,YAAY;QACvBC,OAAO,EAAE;MACX,CAAC;MACDC,QAAQ,EAAE,aAAazB,IAAI,CAACP,IAAI,EAAE,CAAC,CAAC;IACtC,CAAC,EAAEU,IAAI,CAACa,GAAG,CAAC;EACd;;EAEA;EACA,OAAO,aAAahB,IAAI,CAACF,kBAAkB,EAAE;IAC3CO,MAAM,EAAE,SAASA,MAAMA,CAACqB,GAAG,EAAE;MAC3BtB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,IAAIA,OAAO,CAACsB,GAAG,CAAC;IACxD,CAAC;IACDC,kBAAkB,EAAEb;EACtB,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}