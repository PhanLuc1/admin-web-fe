{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { Badge, Space } from 'antd';\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * 获取类型的 type\n *\n * @param obj\n */\nfunction getType(obj) {\n  // @ts-ignore\n  var type = Object.prototype.toString.call(obj).match(/^\\[object (.*)\\]$/)[1].toLowerCase();\n  if (type === 'string' && _typeof(obj) === 'object') return 'object'; // Let \"new String('')\" return 'object'\n  if (obj === null) return 'null'; // PhantomJS has type \"DOMWindow\" for null\n  if (obj === undefined) return 'undefined'; // PhantomJS has type \"DOMWindow\" for undefined\n  return type;\n}\nexport var ProFieldBadgeColor = function ProFieldBadgeColor(_ref) {\n  var color = _ref.color,\n    children = _ref.children;\n  return /*#__PURE__*/_jsx(Badge, {\n    color: color,\n    text: children\n  });\n};\nexport var objectToMap = function objectToMap(value) {\n  if (getType(value) === 'map') {\n    return value;\n  }\n  return new Map(Object.entries(value || {}));\n};\nvar TableStatus = {\n  Success: function Success(_ref2) {\n    var children = _ref2.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"success\",\n      text: children\n    });\n  },\n  Error: function Error(_ref3) {\n    var children = _ref3.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"error\",\n      text: children\n    });\n  },\n  Default: function Default(_ref4) {\n    var children = _ref4.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"default\",\n      text: children\n    });\n  },\n  Processing: function Processing(_ref5) {\n    var children = _ref5.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"processing\",\n      text: children\n    });\n  },\n  Warning: function Warning(_ref6) {\n    var children = _ref6.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"warning\",\n      text: children\n    });\n  },\n  success: function success(_ref7) {\n    var children = _ref7.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"success\",\n      text: children\n    });\n  },\n  error: function error(_ref8) {\n    var children = _ref8.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"error\",\n      text: children\n    });\n  },\n  default: function _default(_ref9) {\n    var children = _ref9.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"default\",\n      text: children\n    });\n  },\n  processing: function processing(_ref10) {\n    var children = _ref10.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"processing\",\n      text: children\n    });\n  },\n  warning: function warning(_ref11) {\n    var children = _ref11.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"warning\",\n      text: children\n    });\n  }\n};\n/**\n * 转化 text 和 valueEnum 通过 type 来添加 Status\n *\n * @param text\n * @param valueEnum\n * @param pure 纯净模式，不增加 status\n */\nexport var proFieldParsingText = function proFieldParsingText(text, valueEnumParams, key) {\n  if (Array.isArray(text)) {\n    return /*#__PURE__*/_jsx(Space, {\n      split: \",\",\n      size: 2,\n      wrap: true,\n      children: text.map(function (value, index) {\n        return (\n          // @ts-ignore\n          proFieldParsingText(value, valueEnumParams, index)\n        );\n      })\n    }, key);\n  }\n  var valueEnum = objectToMap(valueEnumParams);\n  if (!valueEnum.has(text) && !valueEnum.has(\"\".concat(text))) {\n    // @ts-ignore\n    return (text === null || text === void 0 ? void 0 : text.label) || text;\n  }\n  var domText = valueEnum.get(text) || valueEnum.get(\"\".concat(text));\n  if (!domText) {\n    // @ts-ignore\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: (text === null || text === void 0 ? void 0 : text.label) || text\n    }, key);\n  }\n  var status = domText.status,\n    color = domText.color;\n  var Status = TableStatus[status || 'Init'];\n  // 如果类型存在优先使用类型\n  if (Status) {\n    return /*#__PURE__*/_jsx(Status, {\n      children: domText.text\n    }, key);\n  }\n\n  // 如果不存在使用颜色\n  if (color) {\n    return /*#__PURE__*/_jsx(ProFieldBadgeColor, {\n      color: color,\n      children: domText.text\n    }, key);\n  }\n  // 什么都没有使用 text\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: domText.text || domText\n  }, key);\n};","map":{"version":3,"names":["_typeof","Badge","Space","React","jsx","_jsx","getType","obj","type","Object","prototype","toString","call","match","toLowerCase","undefined","ProFieldBadgeColor","_ref","color","children","text","objectToMap","value","Map","entries","TableStatus","Success","_ref2","status","Error","_ref3","Default","_ref4","Processing","_ref5","Warning","_ref6","success","_ref7","error","_ref8","default","_default","_ref9","processing","_ref10","warning","_ref11","proFieldParsingText","valueEnumParams","key","Array","isArray","split","size","wrap","map","index","valueEnum","has","concat","label","domText","get","Fragment","Status"],"sources":["/Users/phanluc/admin-web-fe/node_modules/@ant-design/pro-utils/es/proFieldParsingText/index.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { Badge, Space } from 'antd';\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * 获取类型的 type\n *\n * @param obj\n */\nfunction getType(obj) {\n  // @ts-ignore\n  var type = Object.prototype.toString.call(obj).match(/^\\[object (.*)\\]$/)[1].toLowerCase();\n  if (type === 'string' && _typeof(obj) === 'object') return 'object'; // Let \"new String('')\" return 'object'\n  if (obj === null) return 'null'; // PhantomJS has type \"DOMWindow\" for null\n  if (obj === undefined) return 'undefined'; // PhantomJS has type \"DOMWindow\" for undefined\n  return type;\n}\nexport var ProFieldBadgeColor = function ProFieldBadgeColor(_ref) {\n  var color = _ref.color,\n    children = _ref.children;\n  return /*#__PURE__*/_jsx(Badge, {\n    color: color,\n    text: children\n  });\n};\nexport var objectToMap = function objectToMap(value) {\n  if (getType(value) === 'map') {\n    return value;\n  }\n  return new Map(Object.entries(value || {}));\n};\nvar TableStatus = {\n  Success: function Success(_ref2) {\n    var children = _ref2.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"success\",\n      text: children\n    });\n  },\n  Error: function Error(_ref3) {\n    var children = _ref3.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"error\",\n      text: children\n    });\n  },\n  Default: function Default(_ref4) {\n    var children = _ref4.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"default\",\n      text: children\n    });\n  },\n  Processing: function Processing(_ref5) {\n    var children = _ref5.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"processing\",\n      text: children\n    });\n  },\n  Warning: function Warning(_ref6) {\n    var children = _ref6.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"warning\",\n      text: children\n    });\n  },\n  success: function success(_ref7) {\n    var children = _ref7.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"success\",\n      text: children\n    });\n  },\n  error: function error(_ref8) {\n    var children = _ref8.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"error\",\n      text: children\n    });\n  },\n  default: function _default(_ref9) {\n    var children = _ref9.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"default\",\n      text: children\n    });\n  },\n  processing: function processing(_ref10) {\n    var children = _ref10.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"processing\",\n      text: children\n    });\n  },\n  warning: function warning(_ref11) {\n    var children = _ref11.children;\n    return /*#__PURE__*/_jsx(Badge, {\n      status: \"warning\",\n      text: children\n    });\n  }\n};\n/**\n * 转化 text 和 valueEnum 通过 type 来添加 Status\n *\n * @param text\n * @param valueEnum\n * @param pure 纯净模式，不增加 status\n */\nexport var proFieldParsingText = function proFieldParsingText(text, valueEnumParams, key) {\n  if (Array.isArray(text)) {\n    return /*#__PURE__*/_jsx(Space, {\n      split: \",\",\n      size: 2,\n      wrap: true,\n      children: text.map(function (value, index) {\n        return (\n          // @ts-ignore\n          proFieldParsingText(value, valueEnumParams, index)\n        );\n      })\n    }, key);\n  }\n  var valueEnum = objectToMap(valueEnumParams);\n  if (!valueEnum.has(text) && !valueEnum.has(\"\".concat(text))) {\n    // @ts-ignore\n    return (text === null || text === void 0 ? void 0 : text.label) || text;\n  }\n  var domText = valueEnum.get(text) || valueEnum.get(\"\".concat(text));\n  if (!domText) {\n    // @ts-ignore\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: (text === null || text === void 0 ? void 0 : text.label) || text\n    }, key);\n  }\n  var status = domText.status,\n    color = domText.color;\n  var Status = TableStatus[status || 'Init'];\n  // 如果类型存在优先使用类型\n  if (Status) {\n    return /*#__PURE__*/_jsx(Status, {\n      children: domText.text\n    }, key);\n  }\n\n  // 如果不存在使用颜色\n  if (color) {\n    return /*#__PURE__*/_jsx(ProFieldBadgeColor, {\n      color: color,\n      children: domText.text\n    }, key);\n  }\n  // 什么都没有使用 text\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: domText.text || domText\n  }, key);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}