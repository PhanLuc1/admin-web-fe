{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/esm/regeneratorRuntime\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"data\", \"success\", \"total\"];\nimport { runFunction, useDebounceFn, useDeepCompareEffect, useMountMergeState, usePrevious, useRefFunction } from '@ant-design/pro-utils';\nimport { useEffect, useRef } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { postDataPipeline } from \"./utils/index\";\n\n/**\n * 组合用户的配置和默认值\n *\n * @param param0\n */\nvar mergeOptionAndPageInfo = function mergeOptionAndPageInfo(_ref) {\n  var pageInfo = _ref.pageInfo;\n  if (pageInfo) {\n    var current = pageInfo.current,\n      defaultCurrent = pageInfo.defaultCurrent,\n      pageSize = pageInfo.pageSize,\n      defaultPageSize = pageInfo.defaultPageSize;\n    return {\n      current: current || defaultCurrent || 1,\n      total: 0,\n      pageSize: pageSize || defaultPageSize || 20\n    };\n  }\n  return {\n    current: 1,\n    total: 0,\n    pageSize: 20\n  };\n};\n\n/**\n * useFetchData hook 用来获取数据并控制数据的状态和分页\n * @template T\n * @param {(undefined | ((params?: { pageSize: number; current: number }) => Promise<DataSource>))} getData - 获取数据的函数，参数为分页参数，\n * 返回一个 Promise 类型的 T 类型的数据\n * @param {(undefined | any[])} defaultData - 默认的数据\n * @param {UseFetchProps} options - 配置项，包括了默认的分页参数、格式化数据的函数等\n * @returns {UseFetchDataAction} 返回一个对象，包含当前的数据列表、loading 状态、error、以及可控制的分页参数等\n */\nvar useFetchData = function useFetchData(getData, defaultData, options) {\n  var _options$loading;\n  /**\n   * 用于保存组件是否被卸载的状态的引用\n   * @type {React.MutableRefObject<boolean>}\n   */\n  var umountRef = useRef(false);\n  /**\n   * 用于保存 AbortController 实例的引用，方便需要时进行请求的取消操作\n   * @type {React.MutableRefObject<AbortController | null>}\n   */\n  var abortRef = useRef(null);\n  /**\n   * useFetchData 钩子的配置项\n   * @typedef {object} UseFetchProps\n   * @property {boolean} [onLoad=false] 是否在页面加载时执行请求，默认为 false\n   * @property {boolean} [manual=false] 是否手动触发请求，默认为 false\n   * @property {number | boolean} [polling=false] 是否开启轮询，可以为数字表示轮询的时间间隔，也可以为 true 表示开启默认时间为 1s 的轮询\n   * @property {function} [onRequestError] 请求错误的回调函数\n   * @property {number} [debounceTime=20] 防抖时间，单位为毫秒，默认为 20ms\n   */\n  var _ref2 = options || {},\n    onLoad = _ref2.onLoad,\n    manual = _ref2.manual,\n    polling = _ref2.polling,\n    onRequestError = _ref2.onRequestError,\n    _ref2$debounceTime = _ref2.debounceTime,\n    debounceTime = _ref2$debounceTime === void 0 ? 20 : _ref2$debounceTime,\n    _ref2$effects = _ref2.effects,\n    effects = _ref2$effects === void 0 ? [] : _ref2$effects;\n\n  /** 是否首次加载的指示器 */\n  var manualRequestRef = useRef(manual);\n\n  /** 轮询的setTime ID 存储 */\n  var pollingSetTimeRef = useRef();\n\n  /**\n   * 用于存储最新的数据，这样可以在切换的时候保持数据的一致性\n   */\n  var _useMountMergeState = useMountMergeState(defaultData, {\n      value: options === null || options === void 0 ? void 0 : options.dataSource,\n      onChange: options === null || options === void 0 ? void 0 : options.onDataSourceChange\n    }),\n    _useMountMergeState2 = _slicedToArray(_useMountMergeState, 2),\n    tableDataList = _useMountMergeState2[0],\n    setTableDataList = _useMountMergeState2[1];\n\n  /**\n   * 表格的加载状态\n   */\n  var _useMountMergeState3 = useMountMergeState(false, {\n      value: _typeof(options === null || options === void 0 ? void 0 : options.loading) === 'object' ? options === null || options === void 0 || (_options$loading = options.loading) === null || _options$loading === void 0 ? void 0 : _options$loading.spinning : options === null || options === void 0 ? void 0 : options.loading,\n      onChange: options === null || options === void 0 ? void 0 : options.onLoadingChange\n    }),\n    _useMountMergeState4 = _slicedToArray(_useMountMergeState3, 2),\n    tableLoading = _useMountMergeState4[0],\n    setTableLoading = _useMountMergeState4[1];\n\n  /**\n   * 表示页面信息的类型  useMountMergeState 钩子的初始值和参数\n   * @typedef {object} PageInfo\n   * @property {number} current 当前页码\n   * @property {number} pageSize 页面大小\n   * @property {number} total 数据总量\n   * @type {[PageInfo, React.Dispatch<React.SetStateAction<PageInfo>>]}\n   */\n  var _useMountMergeState5 = useMountMergeState(function () {\n      return mergeOptionAndPageInfo(options);\n    }, {\n      onChange: options === null || options === void 0 ? void 0 : options.onPageInfoChange\n    }),\n    _useMountMergeState6 = _slicedToArray(_useMountMergeState5, 2),\n    pageInfo = _useMountMergeState6[0],\n    setPageInfoState = _useMountMergeState6[1];\n\n  /**\n   * 用于比较并设置页面信息和回调函数的引用更新\n   * @type {React.MutableRefObject<(changePageInfo: PageInfo) => void>}\n   */\n  var _setPageInfo = useRefFunction(function (changePageInfo) {\n    if (changePageInfo.current !== pageInfo.current || changePageInfo.pageSize !== pageInfo.pageSize || changePageInfo.total !== pageInfo.total) {\n      setPageInfoState(changePageInfo);\n    }\n  });\n  var _useMountMergeState7 = useMountMergeState(false),\n    _useMountMergeState8 = _slicedToArray(_useMountMergeState7, 2),\n    pollingLoading = _useMountMergeState8[0],\n    setPollingLoading = _useMountMergeState8[1];\n\n  // Batching update  https://github.com/facebook/react/issues/14259\n  var setDataAndLoading = function setDataAndLoading(newData, dataTotal) {\n    unstable_batchedUpdates(function () {\n      setTableDataList(newData);\n      if ((pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.total) !== dataTotal) {\n        _setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n          total: dataTotal || newData.length\n        }));\n      }\n    });\n  };\n\n  /**\n   * 上一页的页码\n   * @type {number}\n   */\n  var prePage = usePrevious(pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.current);\n\n  /**\n   * 上一页的页面大小\n   * @type {number}\n   */\n  var prePageSize = usePrevious(pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageSize);\n\n  /**\n   * 上一页的轮询时间\n   * @type {number|boolean}\n   */\n  var prePolling = usePrevious(polling);\n\n  /**\n   * 不这样做会导致状态不更新\n   * https://github.com/ant-design/pro-components/issues/4390\n   */\n  var requestFinally = useRefFunction(function () {\n    unstable_batchedUpdates(function () {\n      setTableLoading(false);\n      setPollingLoading(false);\n    });\n  });\n  /** 请求数据 */\n  var fetchList = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(isPolling) {\n      var _ref4, pageSize, current, pageParams, _ref5, _ref5$data, data, success, _ref5$total, total, rest, responseData;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!manualRequestRef.current) {\n              _context.next = 3;\n              break;\n            }\n            manualRequestRef.current = false;\n            return _context.abrupt(\"return\");\n          case 3:\n            if (!isPolling) {\n              setTableLoading(true);\n            } else {\n              setPollingLoading(true);\n            }\n            _ref4 = pageInfo || {}, pageSize = _ref4.pageSize, current = _ref4.current;\n            _context.prev = 5;\n            pageParams = (options === null || options === void 0 ? void 0 : options.pageInfo) !== false ? {\n              current: current,\n              pageSize: pageSize\n            } : undefined;\n            _context.next = 9;\n            return getData === null || getData === void 0 ? void 0 : getData(pageParams);\n          case 9:\n            _context.t0 = _context.sent;\n            if (_context.t0) {\n              _context.next = 12;\n              break;\n            }\n            _context.t0 = {};\n          case 12:\n            _ref5 = _context.t0;\n            _ref5$data = _ref5.data;\n            data = _ref5$data === void 0 ? [] : _ref5$data;\n            success = _ref5.success;\n            _ref5$total = _ref5.total;\n            total = _ref5$total === void 0 ? 0 : _ref5$total;\n            rest = _objectWithoutProperties(_ref5, _excluded);\n            if (!(success === false)) {\n              _context.next = 21;\n              break;\n            }\n            return _context.abrupt(\"return\", []);\n          case 21:\n            responseData = postDataPipeline(data, [options.postData].filter(function (item) {\n              return item;\n            })); // 设置表格数据\n            setDataAndLoading(responseData, total);\n            onLoad === null || onLoad === void 0 || onLoad(responseData, rest);\n            return _context.abrupt(\"return\", responseData);\n          case 27:\n            _context.prev = 27;\n            _context.t1 = _context[\"catch\"](5);\n            if (!(onRequestError === undefined)) {\n              _context.next = 31;\n              break;\n            }\n            throw new Error(_context.t1);\n          case 31:\n            if (tableDataList === undefined) setTableDataList([]);\n            onRequestError(_context.t1);\n          case 33:\n            _context.prev = 33;\n            requestFinally();\n            return _context.finish(33);\n          case 36:\n            return _context.abrupt(\"return\", []);\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[5, 27, 33, 36]]);\n    }));\n    return function fetchList(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * 该函数用于进行数据请求，可以用于轮询或单次请求。\n   * 通过使用 AbortController 取消之前的请求，避免出现请求堆积。\n   * 若需要轮询，则在一定时间后再次调用该函数，最小时间为 200ms，避免一直处于 loading 状态。\n   * 如果请求被取消，则返回空。\n   */\n  var fetchListDebounce = useDebounceFn(/*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(isPolling) {\n      var abort, msg, needPolling;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (pollingSetTimeRef.current) {\n              clearTimeout(pollingSetTimeRef.current);\n            }\n            if (getData) {\n              _context2.next = 3;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 3:\n            abort = new AbortController();\n            abortRef.current = abort;\n            _context2.prev = 5;\n            _context2.next = 8;\n            return Promise.race([fetchList(isPolling), new Promise(function (_, reject) {\n              var _abortRef$current, _abortRef$current$add;\n              (_abortRef$current = abortRef.current) === null || _abortRef$current === void 0 || (_abortRef$current = _abortRef$current.signal) === null || _abortRef$current === void 0 || (_abortRef$current$add = _abortRef$current.addEventListener) === null || _abortRef$current$add === void 0 || _abortRef$current$add.call(_abortRef$current, 'abort', function () {\n                reject('aborted');\n                // 结束请求，并且清空loading控制\n                fetchListDebounce.cancel();\n                requestFinally();\n              });\n            })]);\n          case 8:\n            msg = _context2.sent;\n            if (!abort.signal.aborted) {\n              _context2.next = 11;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 11:\n            // 放到请求前面会导致数据是上一次的\n            needPolling = runFunction(polling, msg);\n            /*\n             * 这段代码是用于控制轮询的。其中，needPolling 参数表明当前是否需要进行轮询，umountRef 是一个 ref，用来记录组件是否被卸载。\n             * 如果需要轮询并且组件没有被卸载，就会调用 setTimeout，等待一定的时间，然后再次调用 fetchListDebounce 函数，并传入需要轮询的时间参数。\n             * 其中 Math.max(needPolling, 2000) 用于确定最小的轮询时间为 2000ms，避免频繁请求导致一直处于 loading 状态。\n             */\n            if (needPolling && !umountRef.current) {\n              pollingSetTimeRef.current = setTimeout(function () {\n                fetchListDebounce.run(needPolling);\n                // 这里判断最小要2000ms，不然一直loading\n              }, Math.max(needPolling, 2000));\n            }\n            return _context2.abrupt(\"return\", msg);\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](5);\n            if (!(_context2.t0 === 'aborted')) {\n              _context2.next = 20;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 20:\n            throw _context2.t0;\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[5, 16]]);\n    }));\n    return function (_x2) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), debounceTime || 30);\n\n  /**\n   * 取消请求\n   */\n  var abortFetch = function abortFetch() {\n    var _abortRef$current2;\n    (_abortRef$current2 = abortRef.current) === null || _abortRef$current2 === void 0 || _abortRef$current2.abort();\n    fetchListDebounce.cancel();\n    requestFinally();\n  };\n\n  // 如果轮询结束了，直接销毁定时器\n  useEffect(function () {\n    if (!polling) {\n      clearTimeout(pollingSetTimeRef.current);\n    }\n    if (!prePolling && polling) {\n      fetchListDebounce.run(true);\n    }\n    return function () {\n      clearTimeout(pollingSetTimeRef.current);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [polling]);\n  useEffect(function () {\n    umountRef.current = false;\n    return function () {\n      umountRef.current = true;\n    };\n  }, []);\n\n  /** PageIndex 改变的时候自动刷新 */\n  useEffect(function () {\n    var _ref7 = pageInfo || {},\n      current = _ref7.current,\n      pageSize = _ref7.pageSize;\n    // 如果上次的页码为空或者两次页码等于是没必要查询的\n    // 如果 pageSize 发生变化是需要查询的，所以又加了 prePageSize\n    if ((!prePage || prePage === current) && (!prePageSize || prePageSize === pageSize)) {\n      return;\n    }\n    if (options.pageInfo && tableDataList && (tableDataList === null || tableDataList === void 0 ? void 0 : tableDataList.length) > pageSize || 0) {\n      return;\n    }\n\n    // 如果 list 的长度大于 pageSize 的长度\n    // 说明是一个假分页\n    // (pageIndex - 1 || 1) 至少要第一页\n    // 在第一页大于 10\n    // 第二页也应该是大于 10\n    if (current !== undefined && tableDataList && tableDataList.length <= pageSize) {\n      abortFetch();\n      fetchListDebounce.run(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.current]);\n\n  // pageSize 修改后返回第一页\n  useEffect(function () {\n    if (!prePageSize) {\n      return;\n    }\n    abortFetch();\n    fetchListDebounce.run(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageSize]);\n\n  /**\n   * 检查是否有正在进行的请求需要被中止。如果是，则使用 abortRef 中的方法来中止请求。\n   * 接下来，使用名为 fetchListDebounce 的防抖函数并传入 false 参数。这个函数可以防止请求过于频繁地发出，通过延迟执行传递给它的函数来实现。\n   * 最后，检查是否有正在进行的请求，如果有，则中止它。\n   */\n  useDeepCompareEffect(function () {\n    abortFetch();\n    fetchListDebounce.run(false);\n    if (!manual) {\n      // 如果 manual 标志未设置，则将 manualRequestRef 设置为 false。\n      // 用于跟踪当前的请求是否是手动发起的。\n      manualRequestRef.current = false;\n    }\n    return function () {\n      abortFetch();\n    };\n  }, [].concat(_toConsumableArray(effects), [manual]));\n  return {\n    /**\n     * 表格的数据列表。\n     * @type {DataSource[]}\n     */\n    dataSource: tableDataList,\n    /**\n     * 用于设置表格数据列表的 setter 函数。\n     * @type {function}\n     * @param {DataSource[]} list - 更新后的表格数据列表。\n     */\n    setDataSource: setTableDataList,\n    /**\n     * 表示表格是否正在加载数据的标志。\n     * @type {boolean}\n     */\n    loading: _typeof(options === null || options === void 0 ? void 0 : options.loading) === 'object' ? _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.loading), {}, {\n      spinning: tableLoading\n    }) : tableLoading,\n    /**\n     * 重新加载表格数据的函数。\n     * @type {function}\n     * @async\n     * @returns {Promise<boolean>} - 数据重新加载完成后解决为 true 的 Promise。\n     */\n    reload: function () {\n      var _reload = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              abortFetch();\n              return _context3.abrupt(\"return\", fetchListDebounce.run(false));\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function reload() {\n        return _reload.apply(this, arguments);\n      }\n      return reload;\n    }(),\n    /**\n     * 当前的分页信息。\n     * @type {Object}\n     * @prop {number} current - 当前页码。\n     * @prop {number} total - 总数据数量。\n     * @prop {number} pageSize - 每页数据数量。\n     */\n    pageInfo: pageInfo,\n    /**\n     * 表示表格是否正在进行轮询请求的标志。\n     * @type {boolean}\n     */\n    pollingLoading: pollingLoading,\n    /**\n     * 重置分页信息为其初始值的函数。\n     * @type {function}\n     * @async\n     * @returns {Promise<void>} - 重置完成后解决的 Promise。\n     */\n    reset: function () {\n      var _reset = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _ref8, optionPageInfo, _ref9, _ref9$defaultCurrent, defaultCurrent, _ref9$defaultPageSize, defaultPageSize, initialPageInfo;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _ref8 = options || {}, optionPageInfo = _ref8.pageInfo;\n              _ref9 = optionPageInfo || {}, _ref9$defaultCurrent = _ref9.defaultCurrent, defaultCurrent = _ref9$defaultCurrent === void 0 ? 1 : _ref9$defaultCurrent, _ref9$defaultPageSize = _ref9.defaultPageSize, defaultPageSize = _ref9$defaultPageSize === void 0 ? 20 : _ref9$defaultPageSize;\n              initialPageInfo = {\n                current: defaultCurrent,\n                total: 0,\n                pageSize: defaultPageSize\n              };\n              _setPageInfo(initialPageInfo);\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function reset() {\n        return _reset.apply(this, arguments);\n      }\n      return reset;\n    }(),\n    /**\n     * 更新分页信息的函数。\n     * @type {function}\n     * @async\n     * @param {Object} info - 新的分页信息。\n     * @prop {number} [current] - 新的当前页码。\n     * @prop {number} [total] - 新的总数据数量。\n     * @prop {number} [pageSize] - 新的每页数据数量。\n     * @returns {Promise<void>} - 更新完成后解决的 Promise。\n     */\n    setPageInfo: function () {\n      var _setPageInfo2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(info) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _setPageInfo(_objectSpread(_objectSpread({}, pageInfo), info));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n      function setPageInfo(_x3) {\n        return _setPageInfo2.apply(this, arguments);\n      }\n      return setPageInfo;\n    }()\n  };\n};\nexport default useFetchData;","map":{"version":3,"names":["_toConsumableArray","_regeneratorRuntime","_objectWithoutProperties","_asyncToGenerator","_objectSpread","_typeof","_slicedToArray","_excluded","runFunction","useDebounceFn","useDeepCompareEffect","useMountMergeState","usePrevious","useRefFunction","useEffect","useRef","unstable_batchedUpdates","postDataPipeline","mergeOptionAndPageInfo","_ref","pageInfo","current","defaultCurrent","pageSize","defaultPageSize","total","useFetchData","getData","defaultData","options","_options$loading","umountRef","abortRef","_ref2","onLoad","manual","polling","onRequestError","_ref2$debounceTime","debounceTime","_ref2$effects","effects","manualRequestRef","pollingSetTimeRef","_useMountMergeState","value","dataSource","onChange","onDataSourceChange","_useMountMergeState2","tableDataList","setTableDataList","_useMountMergeState3","loading","spinning","onLoadingChange","_useMountMergeState4","tableLoading","setTableLoading","_useMountMergeState5","onPageInfoChange","_useMountMergeState6","setPageInfoState","_setPageInfo","changePageInfo","_useMountMergeState7","_useMountMergeState8","pollingLoading","setPollingLoading","setDataAndLoading","newData","dataTotal","length","prePage","prePageSize","prePolling","requestFinally","fetchList","_ref3","mark","_callee","isPolling","_ref4","pageParams","_ref5","_ref5$data","data","success","_ref5$total","rest","responseData","wrap","_callee$","_context","prev","next","abrupt","undefined","t0","sent","postData","filter","item","t1","Error","finish","stop","_x","apply","arguments","fetchListDebounce","_ref6","_callee2","abort","msg","needPolling","_callee2$","_context2","clearTimeout","AbortController","Promise","race","_","reject","_abortRef$current","_abortRef$current$add","signal","addEventListener","call","cancel","aborted","setTimeout","run","Math","max","_x2","abortFetch","_abortRef$current2","_ref7","concat","setDataSource","reload","_reload","_callee3","_callee3$","_context3","reset","_reset","_callee4","_ref8","optionPageInfo","_ref9","_ref9$defaultCurrent","_ref9$defaultPageSize","initialPageInfo","_callee4$","_context4","setPageInfo","_setPageInfo2","_callee5","info","_callee5$","_context5","_x3"],"sources":["/Users/phanluc/admin-web-fe/node_modules/@ant-design/pro-table/es/useFetchData.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/esm/regeneratorRuntime\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"data\", \"success\", \"total\"];\nimport { runFunction, useDebounceFn, useDeepCompareEffect, useMountMergeState, usePrevious, useRefFunction } from '@ant-design/pro-utils';\nimport { useEffect, useRef } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { postDataPipeline } from \"./utils/index\";\n\n/**\n * 组合用户的配置和默认值\n *\n * @param param0\n */\nvar mergeOptionAndPageInfo = function mergeOptionAndPageInfo(_ref) {\n  var pageInfo = _ref.pageInfo;\n  if (pageInfo) {\n    var current = pageInfo.current,\n      defaultCurrent = pageInfo.defaultCurrent,\n      pageSize = pageInfo.pageSize,\n      defaultPageSize = pageInfo.defaultPageSize;\n    return {\n      current: current || defaultCurrent || 1,\n      total: 0,\n      pageSize: pageSize || defaultPageSize || 20\n    };\n  }\n  return {\n    current: 1,\n    total: 0,\n    pageSize: 20\n  };\n};\n\n/**\n * useFetchData hook 用来获取数据并控制数据的状态和分页\n * @template T\n * @param {(undefined | ((params?: { pageSize: number; current: number }) => Promise<DataSource>))} getData - 获取数据的函数，参数为分页参数，\n * 返回一个 Promise 类型的 T 类型的数据\n * @param {(undefined | any[])} defaultData - 默认的数据\n * @param {UseFetchProps} options - 配置项，包括了默认的分页参数、格式化数据的函数等\n * @returns {UseFetchDataAction} 返回一个对象，包含当前的数据列表、loading 状态、error、以及可控制的分页参数等\n */\nvar useFetchData = function useFetchData(getData, defaultData, options) {\n  var _options$loading;\n  /**\n   * 用于保存组件是否被卸载的状态的引用\n   * @type {React.MutableRefObject<boolean>}\n   */\n  var umountRef = useRef(false);\n  /**\n   * 用于保存 AbortController 实例的引用，方便需要时进行请求的取消操作\n   * @type {React.MutableRefObject<AbortController | null>}\n   */\n  var abortRef = useRef(null);\n  /**\n   * useFetchData 钩子的配置项\n   * @typedef {object} UseFetchProps\n   * @property {boolean} [onLoad=false] 是否在页面加载时执行请求，默认为 false\n   * @property {boolean} [manual=false] 是否手动触发请求，默认为 false\n   * @property {number | boolean} [polling=false] 是否开启轮询，可以为数字表示轮询的时间间隔，也可以为 true 表示开启默认时间为 1s 的轮询\n   * @property {function} [onRequestError] 请求错误的回调函数\n   * @property {number} [debounceTime=20] 防抖时间，单位为毫秒，默认为 20ms\n   */\n  var _ref2 = options || {},\n    onLoad = _ref2.onLoad,\n    manual = _ref2.manual,\n    polling = _ref2.polling,\n    onRequestError = _ref2.onRequestError,\n    _ref2$debounceTime = _ref2.debounceTime,\n    debounceTime = _ref2$debounceTime === void 0 ? 20 : _ref2$debounceTime,\n    _ref2$effects = _ref2.effects,\n    effects = _ref2$effects === void 0 ? [] : _ref2$effects;\n\n  /** 是否首次加载的指示器 */\n  var manualRequestRef = useRef(manual);\n\n  /** 轮询的setTime ID 存储 */\n  var pollingSetTimeRef = useRef();\n\n  /**\n   * 用于存储最新的数据，这样可以在切换的时候保持数据的一致性\n   */\n  var _useMountMergeState = useMountMergeState(defaultData, {\n      value: options === null || options === void 0 ? void 0 : options.dataSource,\n      onChange: options === null || options === void 0 ? void 0 : options.onDataSourceChange\n    }),\n    _useMountMergeState2 = _slicedToArray(_useMountMergeState, 2),\n    tableDataList = _useMountMergeState2[0],\n    setTableDataList = _useMountMergeState2[1];\n\n  /**\n   * 表格的加载状态\n   */\n  var _useMountMergeState3 = useMountMergeState(false, {\n      value: _typeof(options === null || options === void 0 ? void 0 : options.loading) === 'object' ? options === null || options === void 0 || (_options$loading = options.loading) === null || _options$loading === void 0 ? void 0 : _options$loading.spinning : options === null || options === void 0 ? void 0 : options.loading,\n      onChange: options === null || options === void 0 ? void 0 : options.onLoadingChange\n    }),\n    _useMountMergeState4 = _slicedToArray(_useMountMergeState3, 2),\n    tableLoading = _useMountMergeState4[0],\n    setTableLoading = _useMountMergeState4[1];\n\n  /**\n   * 表示页面信息的类型  useMountMergeState 钩子的初始值和参数\n   * @typedef {object} PageInfo\n   * @property {number} current 当前页码\n   * @property {number} pageSize 页面大小\n   * @property {number} total 数据总量\n   * @type {[PageInfo, React.Dispatch<React.SetStateAction<PageInfo>>]}\n   */\n  var _useMountMergeState5 = useMountMergeState(function () {\n      return mergeOptionAndPageInfo(options);\n    }, {\n      onChange: options === null || options === void 0 ? void 0 : options.onPageInfoChange\n    }),\n    _useMountMergeState6 = _slicedToArray(_useMountMergeState5, 2),\n    pageInfo = _useMountMergeState6[0],\n    setPageInfoState = _useMountMergeState6[1];\n\n  /**\n   * 用于比较并设置页面信息和回调函数的引用更新\n   * @type {React.MutableRefObject<(changePageInfo: PageInfo) => void>}\n   */\n  var _setPageInfo = useRefFunction(function (changePageInfo) {\n    if (changePageInfo.current !== pageInfo.current || changePageInfo.pageSize !== pageInfo.pageSize || changePageInfo.total !== pageInfo.total) {\n      setPageInfoState(changePageInfo);\n    }\n  });\n  var _useMountMergeState7 = useMountMergeState(false),\n    _useMountMergeState8 = _slicedToArray(_useMountMergeState7, 2),\n    pollingLoading = _useMountMergeState8[0],\n    setPollingLoading = _useMountMergeState8[1];\n\n  // Batching update  https://github.com/facebook/react/issues/14259\n  var setDataAndLoading = function setDataAndLoading(newData, dataTotal) {\n    unstable_batchedUpdates(function () {\n      setTableDataList(newData);\n      if ((pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.total) !== dataTotal) {\n        _setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n          total: dataTotal || newData.length\n        }));\n      }\n    });\n  };\n\n  /**\n   * 上一页的页码\n   * @type {number}\n   */\n  var prePage = usePrevious(pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.current);\n\n  /**\n   * 上一页的页面大小\n   * @type {number}\n   */\n  var prePageSize = usePrevious(pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageSize);\n\n  /**\n   * 上一页的轮询时间\n   * @type {number|boolean}\n   */\n  var prePolling = usePrevious(polling);\n\n  /**\n   * 不这样做会导致状态不更新\n   * https://github.com/ant-design/pro-components/issues/4390\n   */\n  var requestFinally = useRefFunction(function () {\n    unstable_batchedUpdates(function () {\n      setTableLoading(false);\n      setPollingLoading(false);\n    });\n  });\n  /** 请求数据 */\n  var fetchList = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(isPolling) {\n      var _ref4, pageSize, current, pageParams, _ref5, _ref5$data, data, success, _ref5$total, total, rest, responseData;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!manualRequestRef.current) {\n              _context.next = 3;\n              break;\n            }\n            manualRequestRef.current = false;\n            return _context.abrupt(\"return\");\n          case 3:\n            if (!isPolling) {\n              setTableLoading(true);\n            } else {\n              setPollingLoading(true);\n            }\n            _ref4 = pageInfo || {}, pageSize = _ref4.pageSize, current = _ref4.current;\n            _context.prev = 5;\n            pageParams = (options === null || options === void 0 ? void 0 : options.pageInfo) !== false ? {\n              current: current,\n              pageSize: pageSize\n            } : undefined;\n            _context.next = 9;\n            return getData === null || getData === void 0 ? void 0 : getData(pageParams);\n          case 9:\n            _context.t0 = _context.sent;\n            if (_context.t0) {\n              _context.next = 12;\n              break;\n            }\n            _context.t0 = {};\n          case 12:\n            _ref5 = _context.t0;\n            _ref5$data = _ref5.data;\n            data = _ref5$data === void 0 ? [] : _ref5$data;\n            success = _ref5.success;\n            _ref5$total = _ref5.total;\n            total = _ref5$total === void 0 ? 0 : _ref5$total;\n            rest = _objectWithoutProperties(_ref5, _excluded);\n            if (!(success === false)) {\n              _context.next = 21;\n              break;\n            }\n            return _context.abrupt(\"return\", []);\n          case 21:\n            responseData = postDataPipeline(data, [options.postData].filter(function (item) {\n              return item;\n            })); // 设置表格数据\n            setDataAndLoading(responseData, total);\n            onLoad === null || onLoad === void 0 || onLoad(responseData, rest);\n            return _context.abrupt(\"return\", responseData);\n          case 27:\n            _context.prev = 27;\n            _context.t1 = _context[\"catch\"](5);\n            if (!(onRequestError === undefined)) {\n              _context.next = 31;\n              break;\n            }\n            throw new Error(_context.t1);\n          case 31:\n            if (tableDataList === undefined) setTableDataList([]);\n            onRequestError(_context.t1);\n          case 33:\n            _context.prev = 33;\n            requestFinally();\n            return _context.finish(33);\n          case 36:\n            return _context.abrupt(\"return\", []);\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[5, 27, 33, 36]]);\n    }));\n    return function fetchList(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * 该函数用于进行数据请求，可以用于轮询或单次请求。\n   * 通过使用 AbortController 取消之前的请求，避免出现请求堆积。\n   * 若需要轮询，则在一定时间后再次调用该函数，最小时间为 200ms，避免一直处于 loading 状态。\n   * 如果请求被取消，则返回空。\n   */\n  var fetchListDebounce = useDebounceFn( /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(isPolling) {\n      var abort, msg, needPolling;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (pollingSetTimeRef.current) {\n              clearTimeout(pollingSetTimeRef.current);\n            }\n            if (getData) {\n              _context2.next = 3;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 3:\n            abort = new AbortController();\n            abortRef.current = abort;\n            _context2.prev = 5;\n            _context2.next = 8;\n            return Promise.race([fetchList(isPolling), new Promise(function (_, reject) {\n              var _abortRef$current, _abortRef$current$add;\n              (_abortRef$current = abortRef.current) === null || _abortRef$current === void 0 || (_abortRef$current = _abortRef$current.signal) === null || _abortRef$current === void 0 || (_abortRef$current$add = _abortRef$current.addEventListener) === null || _abortRef$current$add === void 0 || _abortRef$current$add.call(_abortRef$current, 'abort', function () {\n                reject('aborted');\n                // 结束请求，并且清空loading控制\n                fetchListDebounce.cancel();\n                requestFinally();\n              });\n            })]);\n          case 8:\n            msg = _context2.sent;\n            if (!abort.signal.aborted) {\n              _context2.next = 11;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 11:\n            // 放到请求前面会导致数据是上一次的\n            needPolling = runFunction(polling, msg);\n            /*\n             * 这段代码是用于控制轮询的。其中，needPolling 参数表明当前是否需要进行轮询，umountRef 是一个 ref，用来记录组件是否被卸载。\n             * 如果需要轮询并且组件没有被卸载，就会调用 setTimeout，等待一定的时间，然后再次调用 fetchListDebounce 函数，并传入需要轮询的时间参数。\n             * 其中 Math.max(needPolling, 2000) 用于确定最小的轮询时间为 2000ms，避免频繁请求导致一直处于 loading 状态。\n             */\n            if (needPolling && !umountRef.current) {\n              pollingSetTimeRef.current = setTimeout(function () {\n                fetchListDebounce.run(needPolling);\n                // 这里判断最小要2000ms，不然一直loading\n              }, Math.max(needPolling, 2000));\n            }\n            return _context2.abrupt(\"return\", msg);\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](5);\n            if (!(_context2.t0 === 'aborted')) {\n              _context2.next = 20;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 20:\n            throw _context2.t0;\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[5, 16]]);\n    }));\n    return function (_x2) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), debounceTime || 30);\n\n  /**\n   * 取消请求\n   */\n  var abortFetch = function abortFetch() {\n    var _abortRef$current2;\n    (_abortRef$current2 = abortRef.current) === null || _abortRef$current2 === void 0 || _abortRef$current2.abort();\n    fetchListDebounce.cancel();\n    requestFinally();\n  };\n\n  // 如果轮询结束了，直接销毁定时器\n  useEffect(function () {\n    if (!polling) {\n      clearTimeout(pollingSetTimeRef.current);\n    }\n    if (!prePolling && polling) {\n      fetchListDebounce.run(true);\n    }\n    return function () {\n      clearTimeout(pollingSetTimeRef.current);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [polling]);\n  useEffect(function () {\n    umountRef.current = false;\n    return function () {\n      umountRef.current = true;\n    };\n  }, []);\n\n  /** PageIndex 改变的时候自动刷新 */\n  useEffect(function () {\n    var _ref7 = pageInfo || {},\n      current = _ref7.current,\n      pageSize = _ref7.pageSize;\n    // 如果上次的页码为空或者两次页码等于是没必要查询的\n    // 如果 pageSize 发生变化是需要查询的，所以又加了 prePageSize\n    if ((!prePage || prePage === current) && (!prePageSize || prePageSize === pageSize)) {\n      return;\n    }\n    if (options.pageInfo && tableDataList && (tableDataList === null || tableDataList === void 0 ? void 0 : tableDataList.length) > pageSize || 0) {\n      return;\n    }\n\n    // 如果 list 的长度大于 pageSize 的长度\n    // 说明是一个假分页\n    // (pageIndex - 1 || 1) 至少要第一页\n    // 在第一页大于 10\n    // 第二页也应该是大于 10\n    if (current !== undefined && tableDataList && tableDataList.length <= pageSize) {\n      abortFetch();\n      fetchListDebounce.run(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.current]);\n\n  // pageSize 修改后返回第一页\n  useEffect(function () {\n    if (!prePageSize) {\n      return;\n    }\n    abortFetch();\n    fetchListDebounce.run(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageSize]);\n\n  /**\n   * 检查是否有正在进行的请求需要被中止。如果是，则使用 abortRef 中的方法来中止请求。\n   * 接下来，使用名为 fetchListDebounce 的防抖函数并传入 false 参数。这个函数可以防止请求过于频繁地发出，通过延迟执行传递给它的函数来实现。\n   * 最后，检查是否有正在进行的请求，如果有，则中止它。\n   */\n  useDeepCompareEffect(function () {\n    abortFetch();\n    fetchListDebounce.run(false);\n    if (!manual) {\n      // 如果 manual 标志未设置，则将 manualRequestRef 设置为 false。\n      // 用于跟踪当前的请求是否是手动发起的。\n      manualRequestRef.current = false;\n    }\n    return function () {\n      abortFetch();\n    };\n  }, [].concat(_toConsumableArray(effects), [manual]));\n  return {\n    /**\n     * 表格的数据列表。\n     * @type {DataSource[]}\n     */\n    dataSource: tableDataList,\n    /**\n     * 用于设置表格数据列表的 setter 函数。\n     * @type {function}\n     * @param {DataSource[]} list - 更新后的表格数据列表。\n     */\n    setDataSource: setTableDataList,\n    /**\n     * 表示表格是否正在加载数据的标志。\n     * @type {boolean}\n     */\n    loading: _typeof(options === null || options === void 0 ? void 0 : options.loading) === 'object' ? _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.loading), {}, {\n      spinning: tableLoading\n    }) : tableLoading,\n    /**\n     * 重新加载表格数据的函数。\n     * @type {function}\n     * @async\n     * @returns {Promise<boolean>} - 数据重新加载完成后解决为 true 的 Promise。\n     */\n    reload: function () {\n      var _reload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              abortFetch();\n              return _context3.abrupt(\"return\", fetchListDebounce.run(false));\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function reload() {\n        return _reload.apply(this, arguments);\n      }\n      return reload;\n    }(),\n    /**\n     * 当前的分页信息。\n     * @type {Object}\n     * @prop {number} current - 当前页码。\n     * @prop {number} total - 总数据数量。\n     * @prop {number} pageSize - 每页数据数量。\n     */\n    pageInfo: pageInfo,\n    /**\n     * 表示表格是否正在进行轮询请求的标志。\n     * @type {boolean}\n     */\n    pollingLoading: pollingLoading,\n    /**\n     * 重置分页信息为其初始值的函数。\n     * @type {function}\n     * @async\n     * @returns {Promise<void>} - 重置完成后解决的 Promise。\n     */\n    reset: function () {\n      var _reset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _ref8, optionPageInfo, _ref9, _ref9$defaultCurrent, defaultCurrent, _ref9$defaultPageSize, defaultPageSize, initialPageInfo;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _ref8 = options || {}, optionPageInfo = _ref8.pageInfo;\n              _ref9 = optionPageInfo || {}, _ref9$defaultCurrent = _ref9.defaultCurrent, defaultCurrent = _ref9$defaultCurrent === void 0 ? 1 : _ref9$defaultCurrent, _ref9$defaultPageSize = _ref9.defaultPageSize, defaultPageSize = _ref9$defaultPageSize === void 0 ? 20 : _ref9$defaultPageSize;\n              initialPageInfo = {\n                current: defaultCurrent,\n                total: 0,\n                pageSize: defaultPageSize\n              };\n              _setPageInfo(initialPageInfo);\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function reset() {\n        return _reset.apply(this, arguments);\n      }\n      return reset;\n    }(),\n    /**\n     * 更新分页信息的函数。\n     * @type {function}\n     * @async\n     * @param {Object} info - 新的分页信息。\n     * @prop {number} [current] - 新的当前页码。\n     * @prop {number} [total] - 新的总数据数量。\n     * @prop {number} [pageSize] - 新的每页数据数量。\n     * @returns {Promise<void>} - 更新完成后解决的 Promise。\n     */\n    setPageInfo: function () {\n      var _setPageInfo2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(info) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _setPageInfo(_objectSpread(_objectSpread({}, pageInfo), info));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n      function setPageInfo(_x3) {\n        return _setPageInfo2.apply(this, arguments);\n      }\n      return setPageInfo;\n    }()\n  };\n};\nexport default useFetchData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}