{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport deepMerge from 'lodash-es/merge';\nimport get from \"rc-util/es/utils/get\";\nimport namePathSet from \"rc-util/es/utils/set\";\nimport React from 'react';\nimport { isNil } from \"../isNil\";\nimport { merge } from \"../merge\";\n/**\n * 暂时还不支持 Set和 Map 结构 判断是不是一个能遍历的对象\n *\n * @param itemValue\n * @returns Boolean\n */\nexport function isPlainObj(itemValue) {\n  if (_typeof(itemValue) !== 'object') return false;\n\n  /** Null 也要处理，不然omit空会失效 */\n  if (itemValue === null) return true;\n  if (/*#__PURE__*/React.isValidElement(itemValue)) return false;\n  if (itemValue.constructor === RegExp) return false;\n  if (itemValue instanceof Map) return false;\n  if (itemValue instanceof Set) return false;\n  if (itemValue instanceof HTMLElement) return false;\n  if (itemValue instanceof Blob) return false;\n  if (itemValue instanceof File) return false;\n  if (Array.isArray(itemValue)) return false;\n  return true;\n}\nexport var transformKeySubmitValue = function transformKeySubmitValue(values, dataFormatMapRaw) {\n  var omit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  // ignore nil transform\n  var dataFormatMap = Object.keys(dataFormatMapRaw).reduce(function (ret, key) {\n    var value = dataFormatMapRaw[key];\n    if (!isNil(value)) {\n      // eslint-disable-next-line no-param-reassign\n      ret[key] = value; // can't be undefined\n    }\n    return ret;\n  }, {});\n  if (Object.keys(dataFormatMap).length < 1) {\n    return values;\n  }\n  if (typeof window === 'undefined') return values;\n  // 如果 value 是 string | null | Array | Blob类型 其中之一，直接返回\n  // 形如 {key: [File, File]} 的表单字段当进行第二次递归时会导致其直接越过 typeof value !== 'object' 这一判断 https://github.com/ant-design/pro-components/issues/2071\n  if (_typeof(values) !== 'object' || isNil(values) || values instanceof Blob) {\n    return values;\n  }\n  var finalValues = Array.isArray(values) ? [] : {};\n  var gen = function gen(tempValues, parentsKey) {\n    var isArrayValues = Array.isArray(tempValues);\n    var result = isArrayValues ? [] : {};\n    if (tempValues == null || tempValues === undefined) {\n      return result;\n    }\n    Object.keys(tempValues).forEach(function (entityKey) {\n      var transformForArray = function transformForArray(transformList, subItemValue) {\n        if (!Array.isArray(transformList)) return entityKey;\n        transformList.forEach(function (transform, idx) {\n          // 如果不存在直接返回\n          if (!transform) return;\n          var subTransformItem = subItemValue === null || subItemValue === void 0 ? void 0 : subItemValue[idx];\n\n          // 如果是个方法，把key设置为方法的返回值\n          if (typeof transform === 'function') {\n            subItemValue[idx] = transform(subItemValue, entityKey, tempValues);\n          }\n          if (_typeof(transform) === 'object' && !Array.isArray(transform)) {\n            Object.keys(transform).forEach(function (transformArrayItem) {\n              var subTransformItemValue = subTransformItem === null || subTransformItem === void 0 ? void 0 : subTransformItem[transformArrayItem];\n              if (typeof transform[transformArrayItem] === 'function' && subTransformItemValue) {\n                var res = transform[transformArrayItem](subTransformItem[transformArrayItem], entityKey, tempValues);\n                subTransformItem[transformArrayItem] = _typeof(res) === 'object' ? res[transformArrayItem] : res;\n              } else if (_typeof(transform[transformArrayItem]) === 'object' && Array.isArray(transform[transformArrayItem]) && subTransformItemValue) {\n                transformForArray(transform[transformArrayItem], subTransformItemValue);\n              }\n            });\n          }\n          if (_typeof(transform) === 'object' && Array.isArray(transform) && subTransformItem) {\n            transformForArray(transform, subTransformItem);\n          }\n        });\n        return entityKey;\n      };\n      var key = parentsKey ? [parentsKey, entityKey].flat(1) : [entityKey].flat(1);\n      var itemValue = tempValues[entityKey];\n      var transformFunction = get(dataFormatMap, key);\n      var transform = function transform() {\n        var tempKey,\n          transformedResult,\n          isTransformedResultPrimitive = false;\n\n        /**\n         * 先判断是否是方法，是的话执行后拿到值，如果是基本类型，则认为是直接 transform 为新的值，\n         * 如果返回是 Object 则认为是 transform 为新的 {newKey: newValue}\n         */\n        if (typeof transformFunction === 'function') {\n          transformedResult = transformFunction === null || transformFunction === void 0 ? void 0 : transformFunction(itemValue, entityKey, tempValues);\n          var typeOfResult = _typeof(transformedResult);\n          if (typeOfResult !== 'object' && typeOfResult !== 'undefined') {\n            tempKey = entityKey;\n            isTransformedResultPrimitive = true;\n          } else {\n            tempKey = transformedResult;\n          }\n        } else {\n          tempKey = transformForArray(transformFunction, itemValue);\n        }\n\n        // { [key:string]:any } 数组也能通过编译\n        if (Array.isArray(tempKey)) {\n          result = namePathSet(result, tempKey, itemValue);\n          return;\n        }\n        if (_typeof(tempKey) === 'object' && !Array.isArray(finalValues)) {\n          finalValues = deepMerge(finalValues, tempKey);\n        } else if (_typeof(tempKey) === 'object' && Array.isArray(finalValues)) {\n          result = _objectSpread(_objectSpread({}, result), tempKey);\n        } else if (tempKey !== null || tempKey !== undefined) {\n          result = namePathSet(result, [tempKey], isTransformedResultPrimitive ? transformedResult : itemValue);\n        }\n      };\n\n      /** 如果存在转化器提前渲染一下 */\n      if (transformFunction && typeof transformFunction === 'function') {\n        transform();\n      }\n      if (typeof window === 'undefined') return;\n      if (isPlainObj(itemValue)) {\n        var genValues = gen(itemValue, key);\n        if (Object.keys(genValues).length < 1) {\n          return;\n        }\n        result = namePathSet(result, [entityKey], genValues);\n        return;\n      }\n      transform();\n    });\n    // namePath、transform在omit为false时需正常返回 https://github.com/ant-design/pro-components/issues/2901#issue-908097115\n    return omit ? result : tempValues;\n  };\n  finalValues = Array.isArray(values) && Array.isArray(finalValues) ? _toConsumableArray(gen(values)) : merge({}, gen(values), finalValues);\n  return finalValues;\n};","map":{"version":3,"names":["_toConsumableArray","_objectSpread","_typeof","deepMerge","get","namePathSet","React","isNil","merge","isPlainObj","itemValue","isValidElement","constructor","RegExp","Map","Set","HTMLElement","Blob","File","Array","isArray","transformKeySubmitValue","values","dataFormatMapRaw","omit","arguments","length","undefined","dataFormatMap","Object","keys","reduce","ret","key","value","window","finalValues","gen","tempValues","parentsKey","isArrayValues","result","forEach","entityKey","transformForArray","transformList","subItemValue","transform","idx","subTransformItem","transformArrayItem","subTransformItemValue","res","flat","transformFunction","tempKey","transformedResult","isTransformedResultPrimitive","typeOfResult","genValues"],"sources":["/Users/phanluc/admin-web-fe/node_modules/@ant-design/pro-utils/es/transformKeySubmitValue/index.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport deepMerge from 'lodash-es/merge';\nimport get from \"rc-util/es/utils/get\";\nimport namePathSet from \"rc-util/es/utils/set\";\nimport React from 'react';\nimport { isNil } from \"../isNil\";\nimport { merge } from \"../merge\";\n/**\n * 暂时还不支持 Set和 Map 结构 判断是不是一个能遍历的对象\n *\n * @param itemValue\n * @returns Boolean\n */\nexport function isPlainObj(itemValue) {\n  if (_typeof(itemValue) !== 'object') return false;\n\n  /** Null 也要处理，不然omit空会失效 */\n  if (itemValue === null) return true;\n  if ( /*#__PURE__*/React.isValidElement(itemValue)) return false;\n  if (itemValue.constructor === RegExp) return false;\n  if (itemValue instanceof Map) return false;\n  if (itemValue instanceof Set) return false;\n  if (itemValue instanceof HTMLElement) return false;\n  if (itemValue instanceof Blob) return false;\n  if (itemValue instanceof File) return false;\n  if (Array.isArray(itemValue)) return false;\n  return true;\n}\nexport var transformKeySubmitValue = function transformKeySubmitValue(values, dataFormatMapRaw) {\n  var omit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  // ignore nil transform\n  var dataFormatMap = Object.keys(dataFormatMapRaw).reduce(function (ret, key) {\n    var value = dataFormatMapRaw[key];\n    if (!isNil(value)) {\n      // eslint-disable-next-line no-param-reassign\n      ret[key] = value; // can't be undefined\n    }\n    return ret;\n  }, {});\n  if (Object.keys(dataFormatMap).length < 1) {\n    return values;\n  }\n  if (typeof window === 'undefined') return values;\n  // 如果 value 是 string | null | Array | Blob类型 其中之一，直接返回\n  // 形如 {key: [File, File]} 的表单字段当进行第二次递归时会导致其直接越过 typeof value !== 'object' 这一判断 https://github.com/ant-design/pro-components/issues/2071\n  if (_typeof(values) !== 'object' || isNil(values) || values instanceof Blob) {\n    return values;\n  }\n  var finalValues = Array.isArray(values) ? [] : {};\n  var gen = function gen(tempValues, parentsKey) {\n    var isArrayValues = Array.isArray(tempValues);\n    var result = isArrayValues ? [] : {};\n    if (tempValues == null || tempValues === undefined) {\n      return result;\n    }\n    Object.keys(tempValues).forEach(function (entityKey) {\n      var transformForArray = function transformForArray(transformList, subItemValue) {\n        if (!Array.isArray(transformList)) return entityKey;\n        transformList.forEach(function (transform, idx) {\n          // 如果不存在直接返回\n          if (!transform) return;\n          var subTransformItem = subItemValue === null || subItemValue === void 0 ? void 0 : subItemValue[idx];\n\n          // 如果是个方法，把key设置为方法的返回值\n          if (typeof transform === 'function') {\n            subItemValue[idx] = transform(subItemValue, entityKey, tempValues);\n          }\n          if (_typeof(transform) === 'object' && !Array.isArray(transform)) {\n            Object.keys(transform).forEach(function (transformArrayItem) {\n              var subTransformItemValue = subTransformItem === null || subTransformItem === void 0 ? void 0 : subTransformItem[transformArrayItem];\n              if (typeof transform[transformArrayItem] === 'function' && subTransformItemValue) {\n                var res = transform[transformArrayItem](subTransformItem[transformArrayItem], entityKey, tempValues);\n                subTransformItem[transformArrayItem] = _typeof(res) === 'object' ? res[transformArrayItem] : res;\n              } else if (_typeof(transform[transformArrayItem]) === 'object' && Array.isArray(transform[transformArrayItem]) && subTransformItemValue) {\n                transformForArray(transform[transformArrayItem], subTransformItemValue);\n              }\n            });\n          }\n          if (_typeof(transform) === 'object' && Array.isArray(transform) && subTransformItem) {\n            transformForArray(transform, subTransformItem);\n          }\n        });\n        return entityKey;\n      };\n      var key = parentsKey ? [parentsKey, entityKey].flat(1) : [entityKey].flat(1);\n      var itemValue = tempValues[entityKey];\n      var transformFunction = get(dataFormatMap, key);\n      var transform = function transform() {\n        var tempKey,\n          transformedResult,\n          isTransformedResultPrimitive = false;\n\n        /**\n         * 先判断是否是方法，是的话执行后拿到值，如果是基本类型，则认为是直接 transform 为新的值，\n         * 如果返回是 Object 则认为是 transform 为新的 {newKey: newValue}\n         */\n        if (typeof transformFunction === 'function') {\n          transformedResult = transformFunction === null || transformFunction === void 0 ? void 0 : transformFunction(itemValue, entityKey, tempValues);\n          var typeOfResult = _typeof(transformedResult);\n          if (typeOfResult !== 'object' && typeOfResult !== 'undefined') {\n            tempKey = entityKey;\n            isTransformedResultPrimitive = true;\n          } else {\n            tempKey = transformedResult;\n          }\n        } else {\n          tempKey = transformForArray(transformFunction, itemValue);\n        }\n\n        // { [key:string]:any } 数组也能通过编译\n        if (Array.isArray(tempKey)) {\n          result = namePathSet(result, tempKey, itemValue);\n          return;\n        }\n        if (_typeof(tempKey) === 'object' && !Array.isArray(finalValues)) {\n          finalValues = deepMerge(finalValues, tempKey);\n        } else if (_typeof(tempKey) === 'object' && Array.isArray(finalValues)) {\n          result = _objectSpread(_objectSpread({}, result), tempKey);\n        } else if (tempKey !== null || tempKey !== undefined) {\n          result = namePathSet(result, [tempKey], isTransformedResultPrimitive ? transformedResult : itemValue);\n        }\n      };\n\n      /** 如果存在转化器提前渲染一下 */\n      if (transformFunction && typeof transformFunction === 'function') {\n        transform();\n      }\n      if (typeof window === 'undefined') return;\n      if (isPlainObj(itemValue)) {\n        var genValues = gen(itemValue, key);\n        if (Object.keys(genValues).length < 1) {\n          return;\n        }\n        result = namePathSet(result, [entityKey], genValues);\n        return;\n      }\n      transform();\n    });\n    // namePath、transform在omit为false时需正常返回 https://github.com/ant-design/pro-components/issues/2901#issue-908097115\n    return omit ? result : tempValues;\n  };\n  finalValues = Array.isArray(values) && Array.isArray(finalValues) ? _toConsumableArray(gen(values)) : merge({}, gen(values), finalValues);\n  return finalValues;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}